---
features: 
  - name: JavaScript Modules API
    summary: |
      Allows developers to import just the parts of Ember they want via a JavaScript
      (ES6) modules API.
    description: |
      While Ember.js apps use JavaScript modules, the framework itself is still
      accessed via the single global `Ember` or the single package `ember`.

      ```ts
      import Ember from 'ember';
      export default Ember.Component.extend({
        // ...
      });
      ```

      [RFC 176](https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md)
      describes a module API for Ember that allows developers to import specific modules rather
      than the whole framework. Decomposing the framework into small modules like this will
      both make Ember more accessible to new users, as well as allow Ember CLI to build smaller
      assets by only including the parts of the framework that actually get used.

      ```typescript
      import Component from '@ember/component';

      export default Component.extend({
        // ...
      });
      ```

      You can find the most up-to-date and complete mappings between the
      previous API and the new modules API at the
      [ember-rfc176-data](https://github.com/ember-cli/ember-rfc176-data)
      repository. We also provide an
      [ember-modules-codemod](https://github.com/tomdale/ember-modules-codemod)
      so that you can easily migrate your project.
    status: shipped
    statusText: Shipped
    availability: Ember CLI Babel v6.6.0+
    resources:
      - type: rfc
        name: RFC 176
        url: https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md
      - type: repo
        name: Ember RFC 176 Data
        url: https://github.com/ember-cli/ember-rfc176-data
      - type: repo
        name: Ember Modules Codemod
        url: https://github.com/tomdale/ember-modules-codemod
    champions:
      - name: Tom Dale
        image: https://avatars0.githubusercontent.com/u/90888?v=4&s=460
        url: https://github.com/tomdale
      - name: Ricardo Mendes
        image: https://avatars2.githubusercontent.com/u/32344?v=4&s=460
        url: https://github.com/locks
  - name: Router Service
    summary: |
      Provides low-level access to Ember's router, giving greater control to app
      and addon authors.
    description: |
      Routing, or mapping URLs on to UI components, is at the heart of every
      Ember application. Historically, app developers have been constrained to
      declarative forms of controlling the router, limiting their ability to
      implement new features easily or replace built-in framework APIs.

      The router service is an Ember
      [`Service`](https://guides.emberjs.com/current/applications/services/) that
      that can be injected into components or other services
      and used to imperatively query and modify the current state of the router.

      By making these lower-level API public, app and addon authors have a
      supported path for replacing Ember's built-in declarative routing APIs
      with their own, should the need arise.

      For example, previously it was impossible to fully recreate Ember's
      `{{link-to}}` component with public API. Developers who wanted to
      experiment with creating an optimized version without the full set of
      features were stuck.

      With the router service, it's possible to write a custom component that
      transitions the application's router to a new URL:

      ```js
      import Component from '@ember/component';
      import { inject } from '@ember/service';

      export default Component.extend({
        router: inject(),
        url: '/home',
        click() {
          let url = this.get('url');
          this.get('router').transitionTo(url);
        }
      })
      ```

      The [Router Service
      RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md)
      has been accepted and implementation has begun. In order to get it in your
      hands as soon as possible, we are taking a phased approach to
      implementation.

      * Phase 1: Basic functionality like transitioning, querying the active
        route, etc.
      * Phase 2: Advanced functionality that exposes and manipulates internal
        data structures describing the current
        routing state.

      Phase 1 was completed and shipped in Ember 2.15, with a [polyfill](https://github.com/rwjblue/ember-router-service-polyfill)
      for older versions of Ember (back to 2.8).

      We are currently looking for someone to lead the implementation of Phase
      2, which requires coordination and refactoring of the `RouteInfo` data structure
      across [router.js](https://github.com/tildeio/router.js/) and Ember's current
      `outletState` and `handlerInfos` data structures.
    status: shipped
    statusText: Partially Shipped
    availability: Available in Ember 2.15 and up
    resources:
      - type: rfc
        name: Router Service
        url: https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md
      - type: pull-request
        name: Router Service MVP
        url: https://github.com/emberjs/ember.js/pull/14805
    champions:
      - name: Robert Jackson
        image: https://avatars2.githubusercontent.com/u/12637?v=4&s=460
        url: https://github.com/rwjblue
      - name: Edward Faulkner
        image: https://avatars0.githubusercontent.com/u/319282?v=4&s=460
        url: https://github.com/ef4
  - name: Module Unification
    summary: |
      Co-locate related parts of the framework such as templates,
      components, and component tests with new filesystem layout.
    description: |
      Ember applications are compiled from JavaScript modules in the `app/` folder and addons.
      The rules for how Ember finds a module for a given part of the system are coupled to the
      implementation instead of any unified design.
      
      Module Unification describes a new way to lay out Ember applications and
      addons in the `src/` directory.
      This design allows us to co-locate related parts of the framework such as templates,
      components, and component tests. It also creates smaller namespaces for components and
      provides a pathway for addons to declare new types of modules. The rules for resolving
      a Module Unification module are also much simpler than the existing rules, meaning
      opportunities for better performance and compile-time optimizations.
    status: in-development
    statusText: In Implementation
    availability: Not yet available.
    resources:
      - type: blogpost
        name: EmberCamp Module Unification Update
        url: https://madhatted.com/2017/7/12/embercamp-module-unification-update
      - type: doc
        name: Coordination doc with relevant issues
        url: https://docs.google.com/document/d/1P9q9K1JNadJclhFG0flUyY2GwKuOzTbgtUbOzuh6JYs/edit#heading=h.45ec702vuy8p
      - type: channel
        name: "#st-module-unification"
        url: https://embercommunity.slack.com
      - type: rfc
        name: Module Unification
        url: https://github.com/emberjs/rfcs/pull/143
    champions:
      - name: Matthew Beale
        image: https://avatars0.githubusercontent.com/u/8752?v=4&s=460
        url: https://github.com/mixonic
      - name: Dan Gebhardt
        image: https://avatars3.githubusercontent.com/u/29122?v=4&s=460
        url: https://github.com/dgeb
  - name: Ember/Glimmer.js Compatibility
    summary: |
      Seamlessly use components written using the [Glimmer.js](https://www.glimmerjs.com)
      component API in Ember apps.
    description: |
      Glimmer.js introduces a new, modern take on writing UI components for the
      web. Because they're powered by the same Glimmer VM that Ember uses, it
      will be possible to mix and match them with your existing components in an
      Ember app.

      We want to be upfront about the fact that the API in Glimmer.js is still
      undergoing rapid breaking changes, and isn't ready to be included by
      default in Ember. For those comfortable living on the bleeding edge,
      however, we'd like to begin this integration work either behind a feature
      flag or via an addon so we can start gathering feedback.

      The first steps toward this integration are:

      1. Iterate and merge the [Custom Components RFC](https://github.com/emberjs/rfcs/blob/custom-components/text/0000-custom-components.md),
         which describes a public API for registering custom Glimmer component managers.
      2. Update the Ember.js build pipeline to support TypeScript. Glimmer itself is exhaustively
         typed, but today Ember's rendering code (on top of Glimmer VM) is untyped JavaScript, which
         has caused unnecessary bugs and lost time.
      3. Update Ember.js to use the latest Glimmer VM version (0.29.0 at the time of this writing).

      There is some additional design work that is still needed as well. For example, Ember needs to
      know which component manager to use for a given template (i.e., is this a Glimmer component
      template or an Ember component template?). We need to design an API that will allow users to
      indicate which is which in projects that use multiple component styles.
    status: in-development
    statusText: In Implementation
    availability: Not yet available.
    resources:
      - type: rfc
        name: Custom Components RFC
        url: https://github.com/emberjs/rfcs/blob/custom-components/text/0000-custom-components.md
    champions:
      - name: Kris Selden
        image: https://avatars2.githubusercontent.com/u/61024?v=4&s=460
        url: https://github.com/krisselden/
      - name: Robert Jackson
        image: https://avatars2.githubusercontent.com/u/12637?v=4&s=460
        url: https://github.com/rwjblue
      - name: Tom Dale
        image: https://avatars0.githubusercontent.com/u/90888?v=4&s=460
        url: https://github.com/tomdale
  - name: Code Splitting
    summary: |
      Split assets up along route boundaries automatically, so file sizes (and
      thus load times) grow with the size of the route, not the entire app.
    description: |
      Code splitting is a technique where you package an app's JavaScript modules
      into multiple "bundles" that can be loaded asynchronously at runtime.
      
      Rather than having to download, parse and evaluate a single, concatenated
      file that contains every dependency and all of the application code, you
      can break it up into a smaller file that contains just a subset for the
      task at hand. You can then fetch additional bundles either in the
      background when the user is idle, or in response to a user-initiated
      action.

      An application's routes are the most common boundary used to decide where
      to split code. Because of Ember's strong conventions around both routing
      and file system layout, and early adoption of JavaScript (ES6) modules, we
      should make it easy for developers to get route-based code splitting "for
      free" with Ember CLI.

      If a developer wants to code split more aggressively (i.e. _within_ a route
      in addition to between routes), at minimum that capability should be
      available via an addon.

      The advantage of code splitting is that load time is tied to the
      complexity of a particular task or page, not the complexity of the entire
      app. Currently, when adding code to an app, every user pays some cost for
      that code even if they never visit the page that uses it.

      The most popular code splitting tool in the ecosystem today is webpack,
      although Closure Compiler has had similar functionality for years.
      Whichever tool we use by default, we want to design the route-based code
      splitting feature to be pluggable so it can be implemented with any tool.
      Not only does this give us portability in case a new tool gains
      popularity, it means that addon authors can experiment with new packaging
      and bundling strategies.

      The [Strategies RFC](https://github.com/ember-cli/rfcs/pull/110) proposes an
      extension to Ember CLI to add a packaging hook to the build pipeline.
      This hook would allow any addon to see the entire application in its final,
      assembled form but before concatenation or compilation of JavaScript modules
      into AMD.

      In keeping with our goal of ["unlocked
      experimentation"](https://emberjs.com/blog/2017/04/05/emberconf-2017-state-of-the-union.html#toc_our-new-modus-operandi-unlocked-experimentation-in-place-upgrades),
      we are starting with this extension point to allow the community to build
      addons that can easily integrate with code splitting tools like webpack.

      Once the extension point exists and we can experiment with different
      approaches, the next step will be to evaluate when and how this might
      become part of the default out-of-the-box Ember experience.
    status: under-consideration
    statusText: 'RFC Submitted'
    availability: Not yet available.
    resources:
      - type: rfc
        name: Packaging Strategies RFC
        url: https://github.com/ember-cli/rfcs/pull/110
    champions:
      - name: Robert Jackson
        image: https://avatars2.githubusercontent.com/u/12637?v=4&s=460
        url: https://github.com/rwjblue
      - name: Tom Dale
        image: https://avatars0.githubusercontent.com/u/90888?v=4&s=460
        url: https://github.com/tomdale
  # - name: 
  #   summary: |
  #     Summary
  #   description: |
  #     Description
  #   status:
  #   statusText:
  #   availability:
  #   resources:
  #     - type:
  #       name:
  #       url:
  #   champions:
  #     - name:
  #       image:
  #       url:
